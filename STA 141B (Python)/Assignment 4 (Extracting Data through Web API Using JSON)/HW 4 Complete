{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2> Richard Safran</h2>\n",
    "<h3> Student ID: 998862635</h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 4\n",
    "\n",
    "In this assignment, you'll combine the assignment 3 data set with nutrition data from the [USDA Food Composition Databases](https://ndb.nal.usda.gov/ndb/search/list). The CSV file `fresh.csv` contains the fresh fruits and vegetables data you extracted in assignment 3.\n",
    "\n",
    "The USDA Food Composition Databases have a [documented](https://ndb.nal.usda.gov/ndb/doc/index) web API that returns data in JSON format . You need a key in order to use the API. Only 1000 requests are allowed per hour, so it would be a good idea to use [caching][requests_cache].\n",
    "\n",
    "[Sign up for an API key here](https://api.data.gov/signup/). The key will work with any Data.gov API. You may need the key again later in the quarter, so make sure you save it.\n",
    "\n",
    "These modules may be useful:\n",
    "\n",
    "* [requests](http://docs.python-requests.org/en/master/user/quickstart/)\n",
    "* [requests_cache][]\n",
    "* [urlparse](https://docs.python.org/2/library/urlparse.html)\n",
    "* [pandas](http://pandas.pydata.org/pandas-docs/stable/)\n",
    "\n",
    "[requests_cache]: https://pypi.python.org/pypi/requests-cache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import requests_cache, requests\n",
    "import pandas as pd\n",
    "import urlparse\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "requests_cache.install_cache('coll_cache')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercise 1.1.__ Read the [search request documentation](https://ndb.nal.usda.gov/ndb/doc/apilist/API-SEARCH.md), then write a function called `ndb_search()` that makes a search request. The function should accept the search term as an argument. The function should return the search result items as a list (for 0 items, return an empty list).\n",
    "\n",
    "Note that the search url is: `https://api.nal.usda.gov/ndb/search`\n",
    "\n",
    "As an example, a search for `\"quail eggs\"` should return this list:\n",
    "\n",
    "```python\n",
    "[{u'ds': u'BL',\n",
    "  u'group': u'Branded Food Products Database',\n",
    "  u'name': u'CHAOKOH, QUAIL EGG IN BRINE, UPC: 044738074186',\n",
    "  u'ndbno': u'45094707',\n",
    "  u'offset': 0},\n",
    " {u'ds': u'BL',\n",
    "  u'group': u'Branded Food Products Database',\n",
    "  u'name': u'L&W, QUAIL EGGS, UPC: 024072000256',\n",
    "  u'ndbno': u'45094890',\n",
    "  u'offset': 1},\n",
    " {u'ds': u'BL',\n",
    "  u'group': u'Branded Food Products Database',\n",
    "  u'name': u'BUDDHA, QUAIL EGGS IN BRINE, UPC: 761934535098',\n",
    "  u'ndbno': u'45099560',\n",
    "  u'offset': 2},\n",
    " {u'ds': u'BL',\n",
    "  u'group': u'Branded Food Products Database',\n",
    "  u'name': u'GRAN SABANA, QUAIL EGGS, UPC: 819140010103',\n",
    "  u'ndbno': u'45169279',\n",
    "  u'offset': 3},\n",
    " {u'ds': u'BL',\n",
    "  u'group': u'Branded Food Products Database',\n",
    "  u'name': u\"D'ARTAGNAN, QUAIL EGGS, UPC: 736622102630\",\n",
    "  u'ndbno': u'45178254',\n",
    "  u'offset': 4},\n",
    " {u'ds': u'SR',\n",
    "  u'group': u'Dairy and Egg Products',\n",
    "  u'name': u'Egg, quail, whole, fresh, raw',\n",
    "  u'ndbno': u'01140',\n",
    "  u'offset': 5}]\n",
    "```\n",
    "\n",
    "As usual, make sure you document and test your function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[{u'ds': u'BL',\n",
       "   u'group': u'Branded Food Products Database',\n",
       "   u'name': u'CHAOKOH, QUAIL EGG IN BRINE, UPC: 044738074186',\n",
       "   u'ndbno': u'45094707',\n",
       "   u'offset': 0},\n",
       "  {u'ds': u'BL',\n",
       "   u'group': u'Branded Food Products Database',\n",
       "   u'name': u'L&W, QUAIL EGGS, UPC: 024072000256',\n",
       "   u'ndbno': u'45094890',\n",
       "   u'offset': 1},\n",
       "  {u'ds': u'BL',\n",
       "   u'group': u'Branded Food Products Database',\n",
       "   u'name': u'BUDDHA, QUAIL EGGS IN BRINE, UPC: 761934535098',\n",
       "   u'ndbno': u'45099560',\n",
       "   u'offset': 2},\n",
       "  {u'ds': u'BL',\n",
       "   u'group': u'Branded Food Products Database',\n",
       "   u'name': u'GRAN SABANA, QUAIL EGGS, UPC: 819140010103',\n",
       "   u'ndbno': u'45169279',\n",
       "   u'offset': 3},\n",
       "  {u'ds': u'BL',\n",
       "   u'group': u'Branded Food Products Database',\n",
       "   u'name': u\"D'ARTAGNAN, QUAIL EGGS, UPC: 736622102630\",\n",
       "   u'ndbno': u'45178254',\n",
       "   u'offset': 4}],\n",
       " [{u'ds': u'SR',\n",
       "   u'group': u'Dairy and Egg Products',\n",
       "   u'name': u'Egg, quail, whole, fresh, raw',\n",
       "   u'ndbno': u'01140',\n",
       "   u'offset': 0}]]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "key = \"kjt7vohPNzvT0WPrtJrCd8ALNNUO7LJ3XYShZWx6\"\n",
    "data_source_cat = [\"Branded Food Products\",\"Standard Reference\"]\n",
    "def ndb_search_url(search_term, data_source, max_per_page, key, offset = 0, verbose = False):\n",
    "    \"\"\"This function takes in a search term(str), the max amount of values to be returned (int) and the \n",
    "    API key for data.gov(str). Then outputs the matching results in a json file.\"\"\"\n",
    "    \n",
    "    #Determine the search specficiations for the API\n",
    "    url = \"https://api.nal.usda.gov/ndb/search\"\n",
    "    response = requests.get(url, params = {\n",
    "            \"q\" : search_term,\n",
    "            \"format\" : \"json\",\n",
    "            \"sort\" : \"r\",\n",
    "            \"ds\": data_source,\n",
    "            \"max\" : max_per_page,\n",
    "            \"offset\" : offset,\n",
    "            \"api_key\" : key\n",
    "        })\n",
    "    response.raise_for_status() # check for errors\n",
    "    if verbose:\n",
    "        print response.url\n",
    "    return response.json()[u'list'][u'item'] # parse JSON\n",
    "quail_check = [ndb_search_url('quail eggs',data_source_cat[z],10,key) for z in range(2)] #Run the function for both the data source types\n",
    "quail_check"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercise 1.2.__ Use your search function to get NDB numbers for the foods in the `fresh.csv` file. It's okay if you don't get an NDB number for every food, but try to come up with a strategy that gets most of them. Discuss your strategy in a short paragraph.\n",
    "\n",
    "Hints:\n",
    "\n",
    "* The foods are all raw and unbranded.\n",
    "* You can test search terms with the [online search page](https://ndb.nal.usda.gov/ndb/search/list).\n",
    "* You can convert the output of `ndb_search()` to a data frame with `pd.DataFrame()`.\n",
    "* The string methods for [Python](https://docs.python.org/2/library/stdtypes.html#string-methods) and [Pandas](http://pandas.pydata.org/pandas-docs/stable/text.html#method-summary) are useful here. It's okay if you use _simple_ regular expressions in the Pandas methods, although this exercise can be solved without them.\n",
    "* You can merge data frames that have a column in common with `pd.merge()`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "My strategy for acquiring the NDB numbers for the foods in fresh.csv consisted of the following steps:\n",
    "\n",
    "1) Obtain the names for all of the food in the fresh.csv and place these into a list that would be easy to iterate across.\n",
    "\n",
    "2) Create a function that took in a food name and plugged the food into the function from problem 1.1. This returned a json file with the most relevant information. Additionally, I found that isolating the values to only Standard Reference (ds = SR) got rid of brands, helping to narrow my search to unbranded.\n",
    "\n",
    "3) After obtaining the json object from the function in problem 1.1 I then used if statements to screen all the n number of inputs. These checked for key phrases and classes such as there being raw present, no juice listed, and the class being either a fruit or a vegtable. I then found that the raw and unbranded food item in its original form tended to be the first value listed after meeting these specficiations. Therefore, I grabbed the first item in the json object and appeneded it to my final NDB json.\n",
    "\n",
    "4) Next, I examined the missing elements and went back and adjusted the names for these food items to grab the appropriate NDB number. For instance, I changed kiwi to kiwifruit, adjusted _ to spaces, switched collard greens to collards, defined the varying types found in some items (like cabbage and cucumbers), and in some situations added raw to the name to ensure I got the right return value, seen in sweet potatoes becoming sweet potatoes,raw. Additionally, I expereimented with different return items in the json list for each food and found 20 a good number to capture the desired output without taking up an exuberent amount of computational capacity.\n",
    "\n",
    "5) Lastly, I transformed my findings into a data frame. This resulted in me obtaining a NDB for every food item and each item being an appropriate classification. The only stretches are certain fruits with a large variety like oranges beings classified as naval oranges."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>form</th>\n",
       "      <th>price_per_lb</th>\n",
       "      <th>yield</th>\n",
       "      <th>lb_per_cup</th>\n",
       "      <th>price_per_cup</th>\n",
       "      <th>food</th>\n",
       "      <th>type</th>\n",
       "      <th>ndbno</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>0.333412</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.330693</td>\n",
       "      <td>0.212033</td>\n",
       "      <td>watermelon</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09326</td>\n",
       "      <td>Watermelon, raw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>0.535874</td>\n",
       "      <td>0.51</td>\n",
       "      <td>0.374786</td>\n",
       "      <td>0.393800</td>\n",
       "      <td>cantaloupe</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09181</td>\n",
       "      <td>Melons, cantaloupe, raw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>1.377962</td>\n",
       "      <td>0.74</td>\n",
       "      <td>0.407855</td>\n",
       "      <td>0.759471</td>\n",
       "      <td>tangerines</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09218</td>\n",
       "      <td>Tangerines, (mandarin oranges), raw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>2.358808</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.319670</td>\n",
       "      <td>0.802171</td>\n",
       "      <td>strawberries</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09316</td>\n",
       "      <td>Strawberries, raw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>1.827416</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.363763</td>\n",
       "      <td>0.707176</td>\n",
       "      <td>plums</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09279</td>\n",
       "      <td>Plums, raw</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     form  price_per_lb  yield  lb_per_cup  price_per_cup          food  \\\n",
       "0  Fresh1      0.333412   0.52    0.330693       0.212033    watermelon   \n",
       "1  Fresh1      0.535874   0.51    0.374786       0.393800    cantaloupe   \n",
       "2  Fresh1      1.377962   0.74    0.407855       0.759471    tangerines   \n",
       "3  Fresh1      2.358808   0.94    0.319670       0.802171  strawberries   \n",
       "4  Fresh1      1.827416   0.94    0.363763       0.707176         plums   \n",
       "\n",
       "    type  ndbno                                 name  \n",
       "0  fruit  09326                      Watermelon, raw  \n",
       "1  fruit  09181              Melons, cantaloupe, raw  \n",
       "2  fruit  09218  Tangerines, (mandarin oranges), raw  \n",
       "3  fruit  09316                    Strawberries, raw  \n",
       "4  fruit  09279                           Plums, raw  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "food_data_path = pd.read_csv(\"/Users/Ricky/Desktop/STA 141b/HW/assignment 4/fresh.csv\")\n",
    "food_list = list(food_data_path['food'])\n",
    "food_list_org = pd.DataFrame(food_data_path) #Preserve the original dataframe before I correct some of the terms\n",
    "\n",
    "#Fix certain \"problem foods\" and adjust to their appropriate value. Used dictionaries to house changes that were not affected by any of the other changes in the dictionary.\n",
    "dict_replace={\n",
    "    'kiwi': 'kiwifruit',\n",
    "    '_':' ',\n",
    "}\n",
    "change_list = list(dict_replace.iteritems())\n",
    "\n",
    "#Iterate over each element of the food_list and then iterate over all the elements in the dictionary to check if they matched. If so replace the first element of the dictionary with the second element.\n",
    "for food in range(len(food_list)):\n",
    "    for item in range(len(change_list)):\n",
    "        food_list[food] = food_list[food].replace(change_list[item][0],change_list[item][1])\n",
    "\n",
    "#For changes affected by prior changes wrote a loop that changes the ith element of bad_terms with the ith element of the replace_terms.        \n",
    "bad_terms = ['collard greens','cucumbers','cucumbers','cabbage', 'cabbage', 'sweet potatoes']\n",
    "replace_terms = ['collards', 'cucumbers, with peel', 'cucumbers, peeled', 'cabbage,raw','cabbage, red', 'sweet potatoes,raw']\n",
    "for term in range(len(bad_terms)):\n",
    "    food_list[food_list.index(bad_terms[term])] = food_list[food_list.index(bad_terms[term])].replace(bad_terms[term],replace_terms[term]) \n",
    "    \n",
    "final_food_list = []\n",
    "def list_food_raw(food): #Function that uses the function from question 1 to grab all the numbers of the IDs for the food from the list above.\n",
    "    \"\"\"\n",
    "    Function takes in a food and returns the top 20 refrences that most closely resemble the food. From these 20 refrences\n",
    "    the function next sorts down the 20 refrences to those that contain the word raw, don't contain the name juice, and \n",
    "    that belong to either the fruit or vegetables category. Last, I appeneded the first remaining value to the data frame\n",
    "    and then broke out of the function.\n",
    "    \"\"\"\n",
    "    food_json = ndb_search_url(food,\"Standard Reference\",20,key)\n",
    "    \n",
    "    for x in range(len(food_json)):\n",
    "        if (food_json[x][u'name'].find(\"raw\") != -1) == True and (food_json[x][u'name'].find(\"juice\") == -1) == True:\n",
    "            if (food_json[x][u'group'] == u'Fruits and Fruit Juices') == True or (food_json[x][u'group'] == u'Vegetables and Vegetable Products') == True:\n",
    "                final_food_list.append(food_json[x])\n",
    "                return final_food_list\n",
    "                break\n",
    "\n",
    "for item in range(len(food_list)):\n",
    "    \"\"\"\n",
    "    Loop over all elements of the food list to run through the function. Returns a single json file with 49 seperate elements\n",
    "    that correspond to the raw number identification for that food.\n",
    "    \"\"\"\n",
    "    json_final_file = list_food_raw(food_list[item])\n",
    "\n",
    "NDB_df = pd.DataFrame(json_final_file) #Data frame from function with ndbno\n",
    "final_df = food_list_org.join(NDB_df['ndbno']).join(NDB_df['name']) #combine ndbno and classification with the original dataframe from the csv file\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercise 1.3.__ Read the [food reports V2 documentation](https://ndb.nal.usda.gov/ndb/doc/apilist/API-FOOD-REPORTV2.md), then write a function called `ndb_report()` that requests a _basic_ food report. The function should accept the NDB number as an argument and return the list of nutrients for the food.\n",
    "\n",
    "Note that the report url is: `https://api.nal.usda.gov/ndb/V2/reports`\n",
    "\n",
    "For example, for `\"09279\"` (raw plums) the first element of the returned list should be:\n",
    "\n",
    "```python\n",
    "{u'group': u'Proximates',\n",
    " u'measures': [{u'eqv': 165.0,\n",
    "   u'eunit': u'g',\n",
    "   u'label': u'cup, sliced',\n",
    "   u'qty': 1.0,\n",
    "   u'value': u'143.93'},\n",
    "  {u'eqv': 66.0,\n",
    "   u'eunit': u'g',\n",
    "   u'label': u'fruit (2-1/8\" dia)',\n",
    "   u'qty': 1.0,\n",
    "   u'value': u'57.57'},\n",
    "  {u'eqv': 151.0,\n",
    "   u'eunit': u'g',\n",
    "   u'label': u'NLEA serving',\n",
    "   u'qty': 1.0,\n",
    "   u'value': u'131.72'}],\n",
    " u'name': u'Water',\n",
    " u'nutrient_id': u'255',\n",
    " u'unit': u'g',\n",
    " u'value': u'87.23'}\n",
    "```\n",
    "\n",
    "Be sure to document and test your function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{u'group': u'Proximates',\n",
       " u'measures': [{u'eqv': 165.0,\n",
       "   u'eunit': u'g',\n",
       "   u'label': u'cup, sliced',\n",
       "   u'qty': 1.0,\n",
       "   u'value': u'143.93'},\n",
       "  {u'eqv': 66.0,\n",
       "   u'eunit': u'g',\n",
       "   u'label': u'fruit (2-1/8\" dia)',\n",
       "   u'qty': 1.0,\n",
       "   u'value': u'57.57'},\n",
       "  {u'eqv': 151.0,\n",
       "   u'eunit': u'g',\n",
       "   u'label': u'NLEA serving',\n",
       "   u'qty': 1.0,\n",
       "   u'value': u'131.72'}],\n",
       " u'name': u'Water',\n",
       " u'nutrient_id': u'255',\n",
       " u'unit': u'g',\n",
       " u'value': u'87.23'}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nutrition_list = [] #Initialize a list to house all the nutrient information\n",
    "\n",
    "def ndb_report(NDB, verbose = False):\n",
    "    \"\"\"\n",
    "    Function takes in a NDB code and returns the json portion that captures the nutrients for that food. Data is returned\n",
    "    with the basic parameter in a json format. API key for data.gov needed.\n",
    "    \"\"\"\n",
    "    url_ndb = \"https://api.nal.usda.gov/ndb/V2/reports\"\n",
    "    response_ndb = requests.get(url_ndb, params = {\n",
    "            \"ndbno\" : NDB,\n",
    "            \"format\" : \"json\",\n",
    "            \"type\" : \"b\",\n",
    "            \"api_key\" : key\n",
    "        })\n",
    "    response_ndb.raise_for_status() # check for errors\n",
    "    if verbose:\n",
    "        print response_ndb.url\n",
    "    return response_ndb.json()[u'foods'][0][u'food'][u'nutrients'] # parse JSON\n",
    "\n",
    "plum_check = ndb_report('09279') #Verify output matches plum output above, which it does\n",
    "\n",
    "NDB_df['ndbno'] = NDB_df['ndbno'].apply(str) #Change the column in the NDB database to a string instead of unicode.\n",
    "for code in range(len(NDB_df['ndbno'])):\n",
    "    \"\"\"\n",
    "    Loop over all elements of the NDB column from 1.2's output to run through the function. Returns a single json file \n",
    "    with 49 seperate elements that correspond to the nutrient information for a food.\n",
    "    \"\"\"\n",
    "    nutrition_list.append(ndb_report(NDB_df['ndbno'][code]))\n",
    "plum_check[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercise 1.4.__ Which foods provide the best combination of price, yield, and nutrition? You can use kilocalories as a measure of \"nutrition\" here, but more a detailed analysis is better. Use plots to support your analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To determine which food was the best combination of price, yield and nutrition I first created a criteria for nutrition. The end criteria examined the kilocalories found in each food where more kilocalories corresponded to a positive effect. This paramater resulted in two ways to interpret the results, the price paid for each additional kcal or the amount of kcals recieved for each dollar, that yielded the same results due to these being a ratio. Based on my findings I discovered that the most cost effective foods were:\n",
    "    \n",
    "    1) Potatoes\n",
    "    2) Bananas\n",
    "    3) Sweet potatoes\n",
    "    4) Avocados\n",
    "    5) Watermelon\n",
    "    \n",
    "Next I wanted to determine whether kcals were different across frutis and vegtables. To answer this question I created a box plot with fruits and vegtables seperated. Based on the graph I can conclude that fruits on avg are a more efficient buy since they yield approximately an extra 50 kcal per every dollar. However, the highest energy containing vegtables yield the most kcal out of any food, being potatoes at number 1, sweet potatoes at number 3, and avocados at number 4. Thus, while fruits would be a better purchase if the food inside the group was selected randomly, the upper outliers in the vegtable group results in 3 of the 4 most efficient foods being vegtables.\n",
    "\n",
    "After just looking at kcal I was interested in examining some extra variables. Therefore, I created a dataframe with all 33 nutrients registered for all of the 49 food items. I was interested in how fiber was related to kcal efficiency, and price overall, especially across the differnt food groups. Therefore, I created a scatter plot that had price per cup on the x axiss, kcal per pound on the y axis, fiber per 100 g as the size of the dots, and color representing the different food groups. This resulted in a small trend where the cheaper the food the lest kcal and fiber present. As the price increased this trend continued but at a lesser degree. Therefore, there is potential heteroskedasicity in the data. It was interesting that every food item except one was underneath 450 kcal per lb as a flat distribution. Fiber also does not appear to be closely tied to the other variables. This could possibly signify price not being closely tied to kcal but instead possibly fat content, nutrients, growth conditions, or rarity of the food.\n",
    "\n",
    "Graphs for each of the paragraphs can be found below in the order they are mentioned above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>form</th>\n",
       "      <th>price_per_lb</th>\n",
       "      <th>yield</th>\n",
       "      <th>lb_per_cup</th>\n",
       "      <th>price_per_cup</th>\n",
       "      <th>food</th>\n",
       "      <th>type</th>\n",
       "      <th>ndbno</th>\n",
       "      <th>name</th>\n",
       "      <th>kcal_per_lb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>0.333412</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.330693</td>\n",
       "      <td>0.212033</td>\n",
       "      <td>watermelon</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09326</td>\n",
       "      <td>Watermelon, raw</td>\n",
       "      <td>136.077711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>0.535874</td>\n",
       "      <td>0.51</td>\n",
       "      <td>0.374786</td>\n",
       "      <td>0.393800</td>\n",
       "      <td>cantaloupe</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09181</td>\n",
       "      <td>Melons, cantaloupe, raw</td>\n",
       "      <td>154.221406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>1.377962</td>\n",
       "      <td>0.74</td>\n",
       "      <td>0.407855</td>\n",
       "      <td>0.759471</td>\n",
       "      <td>tangerines</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09218</td>\n",
       "      <td>Tangerines, (mandarin oranges), raw</td>\n",
       "      <td>240.403956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>2.358808</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.319670</td>\n",
       "      <td>0.802171</td>\n",
       "      <td>strawberries</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09316</td>\n",
       "      <td>Strawberries, raw</td>\n",
       "      <td>145.149558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>1.827416</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.363763</td>\n",
       "      <td>0.707176</td>\n",
       "      <td>plums</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09279</td>\n",
       "      <td>Plums, raw</td>\n",
       "      <td>208.652490</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     form  price_per_lb  yield  lb_per_cup  price_per_cup          food  \\\n",
       "0  Fresh1      0.333412   0.52    0.330693       0.212033    watermelon   \n",
       "1  Fresh1      0.535874   0.51    0.374786       0.393800    cantaloupe   \n",
       "2  Fresh1      1.377962   0.74    0.407855       0.759471    tangerines   \n",
       "3  Fresh1      2.358808   0.94    0.319670       0.802171  strawberries   \n",
       "4  Fresh1      1.827416   0.94    0.363763       0.707176         plums   \n",
       "\n",
       "    type  ndbno                                 name  kcal_per_lb  \n",
       "0  fruit  09326                      Watermelon, raw   136.077711  \n",
       "1  fruit  09181              Melons, cantaloupe, raw   154.221406  \n",
       "2  fruit  09218  Tangerines, (mandarin oranges), raw   240.403956  \n",
       "3  fruit  09316                    Strawberries, raw   145.149558  \n",
       "4  fruit  09279                           Plums, raw   208.652490  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#33 different nutritional parameters that were grabbed if they contained the unit kcal.\n",
    "nutrition_list_kcal = []\n",
    "for s in range(len(food_list)):\n",
    "    \"\"\"\n",
    "    Iterate across all of the 49 food items.\n",
    "    \"\"\"\n",
    "    for r in range(len(nutrition_list[s])):\n",
    "        \"\"\"\n",
    "        Iterate across all of the 33 nutrients\n",
    "        \"\"\"\n",
    "        if (nutrition_list[s][r][u'unit'].encode('ascii','ignore') == 'kcal') == True:\n",
    "            value = int(nutrition_list[s][r][u'value'].encode('ascii','ignore'))*4.5359237 #convert kcal per 100 g to kcal per lb\n",
    "            name = final_df['name'][s] #Obtain the list of names to provide a name to each of the kcal values\n",
    "            nutrition_list_kcal.append([name, value]) #Attach the names to the kcal.\n",
    "kcal_df = pd.DataFrame(nutrition_list_kcal, columns = ['name', 'kcal_per_lb']) #Create a dataframe with the kcal_per_lb and the name of the food. \n",
    "final_df = pd.merge(final_df,kcal_df,on = 'name') #Merge with the main data frame.\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>form</th>\n",
       "      <th>price_per_lb</th>\n",
       "      <th>yield</th>\n",
       "      <th>lb_per_cup</th>\n",
       "      <th>price_per_cup</th>\n",
       "      <th>food</th>\n",
       "      <th>type</th>\n",
       "      <th>ndbno</th>\n",
       "      <th>name</th>\n",
       "      <th>kcal_per_lb</th>\n",
       "      <th>price_per_kcal</th>\n",
       "      <th>kcal_per_dollar</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>0.333412</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.330693</td>\n",
       "      <td>0.212033</td>\n",
       "      <td>watermelon</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09326</td>\n",
       "      <td>Watermelon, raw</td>\n",
       "      <td>136.077711</td>\n",
       "      <td>0.004712</td>\n",
       "      <td>212.231120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>0.535874</td>\n",
       "      <td>0.51</td>\n",
       "      <td>0.374786</td>\n",
       "      <td>0.393800</td>\n",
       "      <td>cantaloupe</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09181</td>\n",
       "      <td>Melons, cantaloupe, raw</td>\n",
       "      <td>154.221406</td>\n",
       "      <td>0.006813</td>\n",
       "      <td>146.775081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>1.377962</td>\n",
       "      <td>0.74</td>\n",
       "      <td>0.407855</td>\n",
       "      <td>0.759471</td>\n",
       "      <td>tangerines</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09218</td>\n",
       "      <td>Tangerines, (mandarin oranges), raw</td>\n",
       "      <td>240.403956</td>\n",
       "      <td>0.007746</td>\n",
       "      <td>129.102939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>2.358808</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.319670</td>\n",
       "      <td>0.802171</td>\n",
       "      <td>strawberries</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09316</td>\n",
       "      <td>Strawberries, raw</td>\n",
       "      <td>145.149558</td>\n",
       "      <td>0.017288</td>\n",
       "      <td>57.843011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fresh1</td>\n",
       "      <td>1.827416</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.363763</td>\n",
       "      <td>0.707176</td>\n",
       "      <td>plums</td>\n",
       "      <td>fruit</td>\n",
       "      <td>09279</td>\n",
       "      <td>Plums, raw</td>\n",
       "      <td>208.652490</td>\n",
       "      <td>0.009317</td>\n",
       "      <td>107.328238</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     form  price_per_lb  yield  lb_per_cup  price_per_cup          food  \\\n",
       "0  Fresh1      0.333412   0.52    0.330693       0.212033    watermelon   \n",
       "1  Fresh1      0.535874   0.51    0.374786       0.393800    cantaloupe   \n",
       "2  Fresh1      1.377962   0.74    0.407855       0.759471    tangerines   \n",
       "3  Fresh1      2.358808   0.94    0.319670       0.802171  strawberries   \n",
       "4  Fresh1      1.827416   0.94    0.363763       0.707176         plums   \n",
       "\n",
       "    type  ndbno                                 name  kcal_per_lb  \\\n",
       "0  fruit  09326                      Watermelon, raw   136.077711   \n",
       "1  fruit  09181              Melons, cantaloupe, raw   154.221406   \n",
       "2  fruit  09218  Tangerines, (mandarin oranges), raw   240.403956   \n",
       "3  fruit  09316                    Strawberries, raw   145.149558   \n",
       "4  fruit  09279                           Plums, raw   208.652490   \n",
       "\n",
       "   price_per_kcal  kcal_per_dollar  \n",
       "0        0.004712       212.231120  \n",
       "1        0.006813       146.775081  \n",
       "2        0.007746       129.102939  \n",
       "3        0.017288        57.843011  \n",
       "4        0.009317       107.328238  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Append new cols for the main dataframe where I standardize kcal with price and yield\n",
    "final_df['price_per_kcal'] = (final_df['price_per_lb']/final_df['kcal_per_lb'])/final_df['yield']\n",
    "final_df['kcal_per_dollar'] = (final_df['kcal_per_lb']/final_df['price_per_lb'])*final_df['yield']\n",
    "final_df['food'] = food_list #Update the food column with my correct food names\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nvwEBJEkv3Q2/PQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x114fe7750>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "graph_df = final_df.set_index(['food'])\n",
    "\n",
    "#Want the lowest price for each kcal since want to minimize price for each kcal of energy \n",
    "sort_cheap_price_per_kcal = graph_df.sort_values('price_per_kcal', ascending=True)\n",
    "cheapest_price_per_kcal = graph_df.sort_values('price_per_kcal', ascending=True).head(5)\n",
    "\n",
    "#Set up the x axis values with names saved to a list and a position for the inital graph.\n",
    "objects = cheapest_price_per_kcal.index.values.tolist()\n",
    "y_pos = np.arange(len(objects))\n",
    "\n",
    "#Plot the data\n",
    "plt.bar(y_pos, cheapest_price_per_kcal['price_per_kcal'], align='center', alpha=0.7)\n",
    "\n",
    "#Set up the graphs\n",
    "plt.xticks(y_pos, objects, rotation = 'vertical')\n",
    "plt.ylabel('Price per kcal')\n",
    "plt.suptitle('Most Cost Effective Food for Yield, Nutrition, and Cost')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nMyJicr49HJgJHBQRl+bbs4B9I+LyXGczYBrwnoi4o+zXYWZmZsuqvEUD2B34m6RLJc2UNFXSYZ0b\nJW0IrA3c0FkWER3A7cB2uWhrYMWaOg8BTxTqmJmZWT9rhUTjrcDhwEPAh4HzgLMl/UfevjYQpBaM\nopl5G8BoYFFOQLqqY2ZmZv1sxaoDICU7d0TEN/LteyRtAXwB+HlZTyppJKlPyGPAy2U9j5mZWRta\nBXgLcF1EzO6uYiskGs+Q+lIUTQM+ka8/C4jUalFs1RgN3FWos7Kk4TWtGqPztno+AvxiOeI2MzMb\n7PYHLumuQiskGrcAm9WUbQY8DhARj0p6FtgFuBde7wy6LXBurn8n8GquU+wMugFwWxfP+xjAxRdf\nzJgxY/ropQwOEyZMYPLkyVWHMaB4nzXH+633vM+a4/3WO9OmTeOAAw6A/F3anVZINCYDt0g6HriU\nlEAcBny2UOcs4ARJ00kv6hTgSeAKSJ1DJV0ATJI0B5gHnA3c0s2Ik5cBxowZw9ixY7uoYvWMGDHC\n+6yXvM+a4/3We95nzfF+a1qPXQ8qTzQi4m+S9gJOBb4BPAocFRG/LNQ5XdKqwPnAGsBNwK4Rsajw\nUBOAxcBlwFDgWuCI/nkVZmZmVk/liQZARFwDXNNDnYnAxG62LwS+lC9mZmbWAlpheKuZmZm1KSca\n1mvjx4+vOoQBx/usOd5vved91hzvt/JUPgV5VfKibXfeeeed7gBkZmbWC1OnTmXcuHEA4yJiand1\n3aJhZmZmpXGiYWZmZqVxomFmZmalcaJhZmZmpXGiYWZmZqVxomFmZmalcaJhZmZmpXGiYWZmZqVx\nomFmZmalcaJhZmZmpXGiYWZmZqVxomFmZmalcaJhZmZmpXGiYWZmZqVxomFmZmalcaJhZmZmpXGi\nYWZmZqVxomFmZmalcaJhZmZmpXGiYWZmZqVxomFmZmalcaJhZmZmpXGiYWZmZqVxomFmZmalcaJh\nZmZmpXGiYWZmZqVxomFmZmalcaJhZmZmpXGiYWZmZqVxomFmZmalcaJhZmZmpXGiYWZmZqVxomFm\nZmalcaJhZmZmpXGiYWZmZqVxomFmZmalcaJhZmZmpXGiYWZmZqWpPNGQdJKk12ouD9TUOVnS05Je\nknS9pI1rtg+VdK6k5yXNk3SZpLX695WYmZlZrcoTjew+YDSwdr7s0LlB0rHAkcDngG2A+cB1klYu\n3P8sYDdgb2BHYF3g1/0SuZmZmXVpxaoDyF6NiFldbDsKOCUirgKQdCAwE9gTuFTScOBQYN+I+HOu\ncwgwTdI2EXFH+eGbmZlZPa2SaGwi6SngZeA24PiImCFpQ1ILxw2dFSOiQ9LtwHbApcDWpNdRrPOQ\npCdynbZMNGbNmkVHR0fVYfS74cOHM2rUqKrDMDOzBrVCovFX4GDgIWAdYCLwF0lbkJKMILVgFM3M\n2yCdclkUEbXfusU6bWXWrFnst9/hzJ69sOpQ+t3IkUO55JLznGyYmQ0QlScaEXFd4eZ9ku4AHgc+\nBTxY9vNPmDCBESNGLFU2fvx4xo8fX/ZTN62jo4PZsxcydOjRDBu2ftXh9JsFC2Ywe/aZdHR0ONEw\nM+snU6ZMYcqUKUuVzZ07t+H7V55o1IqIuZL+AWwM/AkQqdWi2KoxGrgrX38WWFnS8JpWjdF5W7cm\nT57M2LFj+yL0fjds2PqsttpGVYfRrxYOvkYcM7NK1fvxPXXqVMaNG9fQ/Vtl1MnrJK1OSjKejohH\nScnCLoXtw4FtgVtz0Z3AqzV1NgM2IPX3MDMzs4pU3qIh6Qzgt6TTJf8GfBN4BfhlrnIWcIKk6cBj\nwCnAk8AV8Hrn0AuASZLmAPOAs4FbPOLEzMysWpUnGsB6wCXASGAWcDPwnoiYDRARp0taFTgfWAO4\nCdg1IhYVHmMCsBi4DBgKXAsc0W+vwMzMzOqqPNGIiB57XUbERNJolK62LwS+lC9mZmbWIlquj4aZ\nmZm1DycaZmZmVhonGmZmZlYaJxpmZmZWGicaZmZmVhonGmZmZlYaJxpmZmZWGicaZmZmVhonGmZm\nZlYaJxpmZmZWGicaZmZmVhonGmZmZlYaJxpmZmZWGicaZmZmVhonGmZmZlYaJxpmZmZWmhWrDsCs\nv8yaNYuOjo6qw+h3w4cPZ9SoUVWHYWaDlBMNGxRmzZrFfvsdzuzZC6sOpd+NHDmUSy45z8mGmVXC\niYYNCh0dHcyevZChQ49m2LD1qw6n3yxYMIPZs8+ko6PDiYaZVcKJhg0qw4atz2qrbVR1GP1q4eBr\nxDGzFuLOoGZmZlYaJxpmZmZWGicaZmZmVhonGmZmZlYaJxpmZmZWGicaZmZmVhonGmZmZlYaJxpm\nZmZWGicaZmZmVhonGmZmZlYaJxpmZmZWGicaZmZmVhonGmZmZlYaJxpmZmZWGicaZmZmVhonGmZm\n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\n15D0feBjwPsi4pnCpmcBkVotiq0ao4G7CnVWljS8plVjdN7WpcmTJzN27NhmwzYzM2tr9X58T506\nlXHjxjV0/4YSjYjodSfP3shJxh6kUzBP1Dz3o5KeJc0+em+uPxzYljSyBOBO4NVc5/JcZzNgA+C2\nMmM3MzOzrjXVR6Mv5c6k44GPA/Mljc6b5kbEy/n6WcAJkqaThreeAjwJXAGpc6ikC4BJkuaQFn07\nG7jFI07MzMyqU3miAXyBdMrlTzXlhwAXAUTE6ZJWBc4njUq5Cdi1MIcGwARgMXAZacKua4EjSo3c\nzMzMulV5ohERDQ2xjYiJwMRuti8EvpQvZmZm1gKaWSbezMzMrCFONMzMzKw0TjTMzMysNE40zMzM\nrDRONMzMzKw0TjTMzMysNE40zMzMrDRONMzMzKw0TjTMzMysNE40zMzMrDRONMzMzKw0TjTMzMys\nNE40zMzMrDRONMzMzKw0TjTMzMysNE40zMzMrDRONMzMzKw0TjTMzMysNE40zMzMrDRONMzMzKw0\nTjTMzMysNE40zMzMrDRONMzMzKw0TjTMzMysNE40zMzMrDRONMzMzKw0TjTMzMysNE40zMzMrDRO\nNMzMzKw0TjTMzMysNE40zMzMrDRONMzMzKw0TjTMzMysNE40zMzMrDRONMzMzKw0TjTMzMysNE40\nzMzMrDRONMzMzKw0TjTMzMysNE40zMzMrDQtkWhIep+kKyU9Jek1SR+vU+dkSU9LeknS9ZI2rtk+\nVNK5kp6XNE/SZZLW6r9XYWZmZrVaItEAVgPuBr4IRO1GSccCRwKfA7YB5gPXSVq5UO0sYDdgb2BH\nYF3g1+WGbWZmZt1ZseoAACLiWuBaAEmqU+Uo4JSIuCrXORCYCewJXCppOHAosG9E/DnXOQSYJmmb\niLijH16GmZmZ1WiVFo0uSdoQWBu4obMsIjqA24HtctHWpKSpWOch4IlCHTMzM+tnLZ9okJKMILVg\nFM3M2wBGA4tyAtJVHTMzM+tnAyHRMDMzswGqJfpo9OBZQKRWi2KrxmjgrkKdlSUNr2nVGJ23dWnC\nhAmMGDFiqbLx48czfvz45Y3bzMxswJsyZQpTpkxZqmzu3LkN37/lE42IeFTSs8AuwL0AufPntsC5\nudqdwKu5zuW5zmbABsBt3T3+5MmTGTt2bDnBm5mZDXD1fnxPnTqVcePGNXT/lkg0JK0GbExquQB4\nq6StgBciYgZp6OoJkqYDjwGnAE8CV0DqHCrpAmCSpDnAPOBs4BaPODEzM6tOSyQapFEjfyR1+gzg\nzFz+M+DQiDhd0qrA+cAawE3ArhGxqPAYE4DFwGXAUNJw2SP6J3wzMzOrpyUSjTz3RbcdUyNiIjCx\nm+0LgS/li5mZmbUAjzoxMzOz0jjRMDMzs9I40TAzM7PSONEwMzOz0jjRMDMzs9I40TAzM7PSONEw\nMzOz0jjRMDMzs9I40TAzM7PSONEwMzOz0jjRMDMzs9I40TAzM7PSONEwMzOz0jjRMDMzs9I40TAz\nM7PSONEwMzOz0jjRMDMzs9I40TAzM7PSONEwMzOz0jjRMDMzs9I40TAzM7PSONEwMzOz0jjRMDMz\ns9I40TAzM7PSONEwMzOz0jjRMDMzs9I40TAzM7PSONEwMzOz0jjRMDMzs9I40TAzM7PSONEwMzOz\n0jjRMDMzs9I40TAzM7PSONEwMzOz0jjRMDMzs9I40TAzM7PSONEwMzOz0jjRMDMzs9I40TAzM7PS\nONEwMzOz0jjRMDMzs9K0XaIh6QhJj0paIOmvkt5ddUzt5qmnplQdwoDjfdYc77fe8z5rjvdbedoq\n0ZD0aeBM4CTgXcA9wHWS3lRpYG3m6af9gewt77PmeL/1nvdZc7zfytNWiQYwATg/Ii6KiAeBLwAv\nAYdWG5aZmdng1DaJhqSVgHHADZ1lERHAH4DtqorLzMxsMGubRAN4EzAEmFlTPhNYu//DMTMzsxWr\nDqBCqwBMmzat6jh6bcaMGbz00lxeffUG5s27r9+f/+WXn+XZZ6/o9+dduHAmixbN5b777mPu3Lm9\nuq/3We/3GXi/+b3WOL/XmrO8+60qhe/OVXqqq3R2YeDLp05eAvaOiCsL5T8FRkTEXjX19wN+0a9B\nmpmZtZf9I+KS7iq0TYtGRLwi6U5gF+BKAEnKt8+uc5frgP2Bx4CX+ylMMzOzdrAK8BbSd2m32qZF\nA0DSp4Cfkkab3EEahbIPsHlEzKowNDMzs0GpbVo0ACLi0jxnxsnAaOBu4CNOMszMzKrRVi0aZmZm\n1lraaXirmZmZtRgnGmZmZlaatuqjYWYDl6QngD8Bfwb+FBEPVxuRmfUF99Ews5Yg6QBgR+D9wMbA\nU6SkozPx+Gd10bUuScNIx/KX8u03A3sBD0TE7ysNrkVJGgIcTJr+YC1qWvcjYucKwmpbTjSsRz6Q\n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\nA/KMqP39MCjlAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112823bd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Want the most kcal per dollar so find top 5 values\n",
    "sort_cheap_kcal_per_dollar = graph_df.sort_values('kcal_per_dollar', ascending=False)\n",
    "cheapest_kcals_per_dollar = graph_df.sort_values('kcal_per_dollar', ascending=False).head(5)\n",
    "\n",
    "#Set up the x axis values with names saved to a list and a position for the inital graph.\n",
    "objects1 = cheapest_price_per_kcal.index.values.tolist()\n",
    "y_pos1 = np.arange(len(objects1))\n",
    "\n",
    "#Plot the data\n",
    "plt.bar(y_pos1, cheapest_kcals_per_dollar['kcal_per_dollar'], align='center', alpha=0.7)\n",
    "\n",
    "#Set up the graphs\n",
    "plt.xticks(y_pos1, objects1, rotation = 'vertical')\n",
    "plt.ylabel('kcals per dollar')\n",
    "plt.suptitle('Most Cost Effective Food for Yield, Nutrition, and Cost')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Water g</th>\n",
       "      <th>Energy kcal</th>\n",
       "      <th>Protein g</th>\n",
       "      <th>Total lipid (fat) g</th>\n",
       "      <th>Carbohydrate, by difference g</th>\n",
       "      <th>Fiber, total dietary g</th>\n",
       "      <th>Sugars, total g</th>\n",
       "      <th>Calcium, Ca mg</th>\n",
       "      <th>Iron, Fe mg</th>\n",
       "      <th>Magnesium, Mg mg</th>\n",
       "      <th>...</th>\n",
       "      <th>Vitamin E (alpha-tocopherol) mg</th>\n",
       "      <th>Vitamin D (D2 + D3) g</th>\n",
       "      <th>Vitamin D IU</th>\n",
       "      <th>Vitamin K (phylloquinone) g</th>\n",
       "      <th>Fatty acids, total saturated g</th>\n",
       "      <th>Fatty acids, total monounsaturated g</th>\n",
       "      <th>Fatty acids, total polyunsaturated g</th>\n",
       "      <th>Fatty acids, total trans g</th>\n",
       "      <th>Cholesterol mg</th>\n",
       "      <th>Caffeine mg</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>food</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>watermelon</th>\n",
       "      <td>91.45</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.61</td>\n",
       "      <td>0.15</td>\n",
       "      <td>7.55</td>\n",
       "      <td>0.4</td>\n",
       "      <td>6.20</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.24</td>\n",
       "      <td>10.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.016</td>\n",
       "      <td>0.037</td>\n",
       "      <td>0.050</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cantaloupe</th>\n",
       "      <td>90.15</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.84</td>\n",
       "      <td>0.19</td>\n",
       "      <td>8.16</td>\n",
       "      <td>0.9</td>\n",
       "      <td>7.86</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.21</td>\n",
       "      <td>12.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.051</td>\n",
       "      <td>0.003</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tangerines</th>\n",
       "      <td>85.17</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.31</td>\n",
       "      <td>13.34</td>\n",
       "      <td>1.8</td>\n",
       "      <td>10.58</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0.15</td>\n",
       "      <td>12.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.039</td>\n",
       "      <td>0.060</td>\n",
       "      <td>0.065</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>strawberries</th>\n",
       "      <td>90.95</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0.67</td>\n",
       "      <td>0.30</td>\n",
       "      <td>7.68</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.89</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.41</td>\n",
       "      <td>13.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.015</td>\n",
       "      <td>0.043</td>\n",
       "      <td>0.155</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>plums</th>\n",
       "      <td>87.23</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.28</td>\n",
       "      <td>11.42</td>\n",
       "      <td>1.4</td>\n",
       "      <td>9.92</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.17</td>\n",
       "      <td>7.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.4</td>\n",
       "      <td>0.017</td>\n",
       "      <td>0.134</td>\n",
       "      <td>0.044</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Water g  Energy kcal  Protein g  Total lipid (fat) g  \\\n",
       "food                                                                 \n",
       "watermelon      91.45         30.0       0.61                 0.15   \n",
       "cantaloupe      90.15         34.0       0.84                 0.19   \n",
       "tangerines      85.17         53.0       0.81                 0.31   \n",
       "strawberries    90.95         32.0       0.67                 0.30   \n",
       "plums           87.23         46.0       0.70                 0.28   \n",
       "\n",
       "              Carbohydrate, by difference g  Fiber, total dietary g  \\\n",
       "food                                                                  \n",
       "watermelon                             7.55                     0.4   \n",
       "cantaloupe                             8.16                     0.9   \n",
       "tangerines                            13.34                     1.8   \n",
       "strawberries                           7.68                     2.0   \n",
       "plums                                 11.42                     1.4   \n",
       "\n",
       "              Sugars, total g  Calcium, Ca mg  Iron, Fe mg  Magnesium, Mg mg  \\\n",
       "food                                                                           \n",
       "watermelon               6.20             7.0         0.24              10.0   \n",
       "cantaloupe               7.86             9.0         0.21              12.0   \n",
       "tangerines              10.58            37.0         0.15              12.0   \n",
       "strawberries             4.89            16.0         0.41              13.0   \n",
       "plums                    9.92             6.0         0.17               7.0   \n",
       "\n",
       "                 ...       Vitamin E (alpha-tocopherol) mg  \\\n",
       "food             ...                                         \n",
       "watermelon       ...                                  0.05   \n",
       "cantaloupe       ...                                  0.05   \n",
       "tangerines       ...                                  0.20   \n",
       "strawberries     ...                                  0.29   \n",
       "plums            ...                                  0.26   \n",
       "\n",
       "              Vitamin D (D2 + D3) g  Vitamin D IU  \\\n",
       "food                                                \n",
       "watermelon                      0.0           0.0   \n",
       "cantaloupe                      0.0           0.0   \n",
       "tangerines                      0.0           0.0   \n",
       "strawberries                    0.0           0.0   \n",
       "plums                           0.0           0.0   \n",
       "\n",
       "              Vitamin K (phylloquinone) g  Fatty acids, total saturated g  \\\n",
       "food                                                                        \n",
       "watermelon                            0.1                           0.016   \n",
       "cantaloupe                            2.5                           0.051   \n",
       "tangerines                            0.0                           0.039   \n",
       "strawberries                          2.2                           0.015   \n",
       "plums                                 6.4                           0.017   \n",
       "\n",
       "              Fatty acids, total monounsaturated g  \\\n",
       "food                                                 \n",
       "watermelon                                   0.037   \n",
       "cantaloupe                                   0.003   \n",
       "tangerines                                   0.060   \n",
       "strawberries                                 0.043   \n",
       "plums                                        0.134   \n",
       "\n",
       "              Fatty acids, total polyunsaturated g  \\\n",
       "food                                                 \n",
       "watermelon                                   0.050   \n",
       "cantaloupe                                   0.081   \n",
       "tangerines                                   0.065   \n",
       "strawberries                                 0.155   \n",
       "plums                                        0.044   \n",
       "\n",
       "              Fatty acids, total trans g  Cholesterol mg  Caffeine mg  \n",
       "food                                                                   \n",
       "watermelon                           0.0             0.0          0.0  \n",
       "cantaloupe                           0.0             0.0          0.0  \n",
       "tangerines                           0.0             0.0          0.0  \n",
       "strawberries                         0.0             0.0          0.0  \n",
       "plums                                0.0             0.0          0.0  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nutrition_name = []\n",
    "nutrient_list_comp = []\n",
    "for r in range(len(nutrition_list[0])):\n",
    "    \"\"\"\n",
    "    Iterate across all 33 elements in the nutrition list. Grabs the nurtrient name and the unit of measure for that name.\n",
    "    \"\"\"\n",
    "    nutrient_name = nutrition_list[0][r][u'name'].encode('ascii','ignore')\n",
    "    measure_nutrient_name = nutrition_list[0][r][u'unit'].encode('ascii','ignore')\n",
    "    nutrients_info = [nutrient_name, measure_nutrient_name]\n",
    "    nutrition_name.append(nutrients_info) \n",
    "    \n",
    "for s in range(len(food_list)):\n",
    "    \"\"\"\n",
    "    Iterate across all 49 elements in the food list and for each item build a row with all 33 nutrients. Then append each\n",
    "    row to get a data frame for all 49 food items with all of the nutritional information present.\n",
    "    \"\"\"\n",
    "    nutrient_data = []\n",
    "    nutrient_names = []\n",
    "    for r in range(len(nutrition_list[s])):\n",
    "        nutrient_name = nutrition_list[0][r][u'name'].encode('ascii','ignore') #Acquire the name of the nutrient\n",
    "        measure_nutrient_name = nutrition_list[0][r][u'unit'].encode('ascii','ignore') #Acquire the unit of measure for the nutrient\n",
    "        column_nutrients = (nutrient_name+\" \"+measure_nutrient_name) #Put the name and unit of measure together\n",
    "        nutrient_names.append(column_nutrients) #Append name and unit to a list\n",
    "        value_nutrients = float(nutrition_list[s][r][u'value'].encode('ascii','ignore')) #Find the value for the corresponding nutrient and item\n",
    "        nutrient_data.extend([value_nutrients]) #Keep adding the value on to a list                                                      \n",
    "    nutrient_list_comp.append(nutrient_data) #Append the whole row to a list in the form of a list \n",
    "\n",
    "nutrient_df = pd.DataFrame(nutrient_list_comp, columns = [n for n in nutrient_names]) #Create a data frame with the nutrients\n",
    "nutrient_df = pd.DataFrame(food_list, columns = [\"food\"]).join(nutrient_df) #Make another data frame with the food names and append the values on to it.\n",
    "nutrient_df_comp = nutrient_df.set_index([\"food\"]) #Set the food as the index.\n",
    "final_df_nutrients = pd.merge(final_df,nutrient_df, on = 'food') #Merge on to the original df.\n",
    "nutrient_df_comp.head() #Waht the nutrient df looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1128231d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Creating a boxplot comparing fruits and vegtables kcal per dollar\n",
    "fruits = final_df[final_df['type'] == 'fruit']\n",
    "veggies = final_df[final_df['type'] == 'vegetables']\n",
    "x_labels = ['fruits','vegetables']\n",
    "pos = np.arange(len(x_labels))+1\n",
    "\n",
    "plt.boxplot([fruits['kcal_per_dollar'],veggies['kcal_per_dollar']], 0, 'gD')\n",
    "plt.ylabel('kcal per dollar')\n",
    "plt.xticks(pos, x_labels)\n",
    "plt.title('Comparison Fruit and Vegtables: kcal per dollar')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x118859cd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Isolate the type of food so to assign different colors and make a lengend with colors shaded in.\n",
    "fruits_df = final_df_nutrients[final_df_nutrients[\"type\"] ==\"fruit\"]\n",
    "vegetables_df = final_df_nutrients[final_df_nutrients[\"type\"] ==\"vegetables\"]\n",
    "use_colours = {\"fruit\": \"orange\", \"vegetables\": \"green\"}\n",
    "\n",
    "#Plot comparing 4 variables. X axis is price per cup, Y axis is Kcal per lb, color is type of food, and size is fiber.\n",
    "plt.scatter(fruits_df[\"price_per_cup\"], fruits_df[\"kcal_per_lb\"], c = use_colours[\"fruit\"], s=fruits_df[\"Fiber, total dietary g\"]*12, alpha=0.5, label = \"fruit\")\n",
    "plt.scatter(vegetables_df[\"price_per_cup\"], vegetables_df[\"kcal_per_lb\"], c=use_colours[\"vegetables\"], s=vegetables_df[\"Fiber, total dietary g\"]*12, alpha=0.5, label = \"vegetables\")\n",
    "plt.ylabel(\"kcal per lb\")\n",
    "plt.xlabel(\"price_per_cup\")\n",
    "plt.suptitle(\"Price per Cup vs Kcal per Lb with Fiber as Size\")\n",
    "plt.legend(scatterpoints = 1)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
